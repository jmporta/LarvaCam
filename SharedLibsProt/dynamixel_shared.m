function [methodinfo,structs,enuminfo,ThunkLibName]=dynamixel_shared
%DYNAMIXEL_SHARED Create structures to define interfaces found in 'dynamixel'.

%This function was generated by loadlibrary.m parser version  on Tue Oct 30 12:17:27 2018
%perl options:'dynamixel.i -outfile=dynamixel_shared.m -thunkfile=dynamixel_thunk_pcwin64.c -header=dynamixel.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'dynamixel_thunk_pcwin64');
% int _stdcall  dxl_initialize ( int devIndex , int baudnum ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='dxl_initialize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% void _stdcall  dxl_terminate (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='dxl_terminate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void _stdcall  dxl_set_txpacket_id ( int id ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='dxl_set_txpacket_id'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void _stdcall  dxl_set_txpacket_instruction ( int instruction ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='dxl_set_txpacket_instruction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void _stdcall  dxl_set_txpacket_parameter ( int index , int value ); 
fcns.thunkname{fcnNum}='voidint32int32Thunk';fcns.name{fcnNum}='dxl_set_txpacket_parameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% void _stdcall  dxl_set_txpacket_length ( int length ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='dxl_set_txpacket_length'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int _stdcall  dxl_get_rxpacket_error ( int errbit ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='dxl_get_rxpacket_error'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int _stdcall  dxl_get_rxpacket_parameter ( int index ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='dxl_get_rxpacket_parameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int _stdcall  dxl_get_rxpacket_length (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='dxl_get_rxpacket_length'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall  dxl_makeword ( int lowbyte , int highbyte ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='dxl_makeword'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int _stdcall  dxl_get_lowbyte ( int word ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='dxl_get_lowbyte'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int _stdcall  dxl_get_highbyte ( int word ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='dxl_get_highbyte'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void _stdcall  dxl_tx_packet (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='dxl_tx_packet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void _stdcall  dxl_rx_packet (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='dxl_rx_packet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void _stdcall  dxl_txrx_packet (); 
fcns.thunkname{fcnNum}='voidThunk';fcns.name{fcnNum}='dxl_txrx_packet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int _stdcall  dxl_get_result (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='dxl_get_result'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void _stdcall  dxl_ping ( int id ); 
fcns.thunkname{fcnNum}='voidint32Thunk';fcns.name{fcnNum}='dxl_ping'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int _stdcall  dxl_read_byte ( int id , int address ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='dxl_read_byte'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% void _stdcall  dxl_write_byte ( int id , int address , int value ); 
fcns.thunkname{fcnNum}='voidint32int32int32Thunk';fcns.name{fcnNum}='dxl_write_byte'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int _stdcall  dxl_read_word ( int id , int address ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='dxl_read_word'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% void _stdcall  dxl_write_word ( int id , int address , int value ); 
fcns.thunkname{fcnNum}='voidint32int32int32Thunk';fcns.name{fcnNum}='dxl_write_word'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
methodinfo=fcns;